public class node_03_基本数据类型转换 {
    public static void main(String[] args) {
        //方法名不建议用中文,不过这里是学习记录笔记。方法名用中文更好明白调用的方法是做什么的
        System.out.println("-------------------自动类型转换-------------------");
        自动类型转换();
        System.out.println("-------------------强制类型转换-------------------");
        强制类型转换();
    }

    private static void 自动类型转换(){
        /**
         * 自动类型转换
         *  当Java长须在进行赋值或者运算时,精度小的类型会自动转换成精度大的类型
         * 转换路径:
         *  1.
         *      char -->  int  -->  long  -->  float  -->  double
         *  2.
         *      byte -->  short  -->  int  -->  long  -->  float  -->  double
         * 注意:
         */
        int a = 'a';
        double b = 20;
        //******************************注意******************************
        /**
         * 1.当多种类型的数据进行混合运算时,系统会自动将所有数据转换成多种类型中容量最大的类型,然后在进行计算
         * 2.当把容量大的数据类型赋值给容量小的数据类型时,就会报错.否则就会进行自动类型转换
         */
        int n1 = 10;
//        float f1 = n1 + 1.0;//n1 + 1.0计算结果为double类型所以这一行会报错
        float f2 = n1 + 1.0F;
        double d1 = n1 + 1.0;

        //3.(byte,short)和char之间不会互相自动转换
        byte b1 = 97;
//        char c1 = b1;//byte不能转换成char

        //4.byte,short,char三者在参与计算时,都会先转换成int类型再进行运算
        byte b2 = 1;
        byte b3 = 1;
        int i = b2 + b3;//虽然是俩byte相加,但是也会先提升为int类型再相加
        //5.boolean类不参与转换
        //int i1 = false;
    }

    private static void 强制类型转换(){
        /**
         * 强制类型转换
         *  自动类型转换的逆过程,把容量大的数据类型转换为容量小的数据类型,转换时要加上强制转换符(要转换的类型)。会造成精度降低或溢出
         */
        int i1 = (int)1.8;//这里会把double转换为int,会造成精度损失,结果是1
        System.out.println("i1 = " + i1);
        byte b1 = (byte)2000;//这里把int转换为byte,会造成数据溢出
        System.out.println("b1 = " + b1);
        //******************************注意******************************
        //1.强转符号只针对与最近的变量有效
//        int a = (int)10 * 3.5 + 6 * 1.5;//这里的计算结果为double,无法赋值给int类型的变量
        int b = (int)(10 * 3.5 + 6 * 1.5);//可以用小括号来提升运算优先级后再进行转换

        //2.char类型可以保存int的常量值,不能保存int的变量值,需要强制转换
        int c = 100;
        char d = 100;
//        char e = c;
        char f = (char)c;
    }

}
